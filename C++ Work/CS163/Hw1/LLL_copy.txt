//Ryan W. Writz (c) 2015 
//Hw #1 CS163
//HW1_LLL.cpp
//Here the functions for the DIY (Do it yourself) class are implemented
//In order to set up the information from the external data file appropriately 

/*
#include "HW1.h" 

//Constructor that will set up head and tail pointers appropriately
//fix on a new node. This should make sure no matter you have at least
//a list of one node for both LLLs.
DIY :: DIY()
{	part_temp = part_head = new node;//setting up part LLL
	step_temp = step_head = new node;//setting up step LLL
	part_head -> next = NULL;
	part_temp -> next = NULL;
	step_head -> next = NULL;
	step_temp -> next = NULL;
	part_head -> PartItem.Describe = new char[100];//Adjust so that you use temp arrays
	part_head -> PartItem.StepNumUse = new char[100];
	part_head -> PartItem.StepPartUse = new char[100]; 


	
	step_temp -> PartItem.Parts = new char[100];
	step_temp -> PartItem.PartQuantity = new char[100];
	int step_number = 1;

	ifstream ReadIn;
	
	
	ReadIn.open("parts.txt");

	if(ReadIn.good())
	{	while(!ReadIn.eof())
		{	//Use temp pointer to insert, possibly same or not to sort  
			ReadIn >> part_temp -> PartItem.PartNum;
			ReadIn.ignore(100, ':');
			ReadIn.getline( part_temp -> PartItem.Describe, 100, ':');
			ReadIn >> part_temp -> PartItem.Quantity;
			ReadIn.ignore(100, ':');
			ReadIn.getline( part_temp -> PartItem.StepNumUse, 100, ':'); 
			ReadIn.getline( part_temp -> PartItem.StepPartUse, 100, '\n'); 
			
			part_temp -> next = new node;
			part_temp = part_temp -> next;
			part_temp -> PartItem.Describe = new char[100];//Adjust so that you use temp arrays
			part_temp -> PartItem.StepNumUse = new char[100];
			part_temp -> PartItem.StepPartUse = new char[100]; 
			part_temp -> next = NULL;
			
		}
	}	
	ReadIn.close();
	ReadIn.clear();
//Step #, parts needed and number of each 
	while(step_temp -> next != NULL)
	  {	part_temp = part_head;
		while(part_temp != NULL)
		{//if part num matches step num
                	//if(strcmp(part_temp -> PartItem.StepPartUse,
			{//append part num to PartItem.Parts
			 //append part quantity to PartItem.PartQuantity
			}
		}
		//After first node set up 
		step_temp -> next = new node;
		step_temp -> PartItem.Parts = new char[100];
		step_temp -> PartItem.PartQuantity = new char[100];
		
	  }
}

//Destructor that will dereference all the pointers used 
DIY :: ~DIY()
{	delete [] part_head;
	delete [] part_temp;
	delete [] step_head;
}

//Displays the part you want to look at as well as its 
//description, quantity, the steps that use it and 
//the number of steps that use it 
int DIY :: Display_Parts()
{	if(!part_head)
		return 0;	
	
	node * part_current = part_head;
	cout << "Here is your Part List.\n";

	while(part_current != NULL)//Probably causing problems
		{	
			cout << "Part #"<< part_current -> PartItem.PartNum << ":\n";
			cout << "Description:\n" << part_current -> PartItem.Describe << endl;
			cout << "\t" << "Quanity- " << part_current -> PartItem.Quantity << endl; 
			cout << "\t" << "Number of steps that use this part- "; 
                        cout << part_current -> PartItem.StepNumUse << endl;  
			cout << "\t" << "Steps that use this part- " << part_current -> PartItem.StepPartUse << endl;
			
			part_current = part_current -> next;
		}
	
}
//Displays the step you want to look at as well as the
//Parts required and their quantity 
int DIY :: Display_Steps()
{	node * step_current = step_head;
	
	if(!step_head)
		return 0;	
	
	//step_current -> PartItem.StepNumUse = new char[100];

	while(step_current != NULL)
		{	cout << "Part #" << step_current -> PartItem.PartNum << ":\n";
			cout << "\t" << "Quanity- " << step_current -> PartItem.Quantity << endl;
			
			step_current = step_current -> next;
		}	

}

//Will move to next step/part # when user is prompted 
int DIY :: Next_Step(int step_number, Part parts_list[], int & Quanity)
{	char NStep = 'y';
	
	cout << "Here is the information for Part " << step_number << ":\n";
	//cout << "Would you like to  
	if(NStep != 'n')
	{	cout << "Would you like to go to the next step?\n";
		cin >> NStep;
	//Traversal magic	
	}

}
*/
